doctype html
html(lang='en')
  head
    meta(charset='utf-8')

    link(rel='stylesheet', href='css/index.css')

    title The History of Cryptography

  body
    .reveal
      .slides
        section
          h2 The History of
          h1 Cryptography
        section
          p cryp·tog·ra·phy
          blockquote
            | the enciphering and deciphering of messages in secret code or cipher;
            | also: the computerized encoding and decoding of information
        section
          section
            h2 Scytales
            h3 AKA 'Rail Fences'
            img.plain.stretch(data-src='img/scytale.png' style='background: none;')
          section
            p
              | Just a stick of a specific diameter, with a piece of paper or leather wrapped
              | around it. The 'key' is the diameter of the cylinder.
          section
            h3 Demo
            .demo
              label(for='scytale-input') Input
              input#scytale-input(type='text', name='scytale-input' value="This was a triumph!")
            .demo
              label(for='scytale-key') Diameter
              input#scytale-key(type='number', name="scytale-key" value="5")
            .buttons
              input#scytale-encipher(type='button', value='Encipher')
              input#scytale-decipher(type='button', value='Decipher')
            .demo
              label(for='scytale-output') Output
              input#scytale-output(type='text', name='scytale-output')
            p
          section
            h3 Scytale Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td 20-ish?
                  td ~4
            p
              | Easy to break by hand.
        section
          section
            h2 Caesar Cipher
            img.plain(data-src='img/caesar-cipher.svg' style='background: none;')
          section
            h3 Demo
            .demo
              label(for='caesar-input') Input
              input#caesar-input(type='text', name='caesar-input' value="I'm making a note here: Huge Success.")
            .demo
              label(for='caesar-key') Shift Size
              input#caesar-key(type='number', name="caesar-key" value="5")
            .buttons
              input#caesar-encipher(type='button', value='Encipher')
              input#caesar-decipher(type='button', value='Decipher')
            .demo
              label(for='caesar-output') Output
              input#caesar-output(type='text', name='caesar-output')
          section
            h3 Caesar Cipher Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td 25
                  td 4.64
            p
              | Once again, easy to break.
        section
          img(data-src='img/substitution.gif')
          h1 Substitution Ciphers
        section
          section
            img.plain.stretch(data-src='img/monoalphabetic.svg' style='background: none;')
            h2 Monoalphabetic Substitution Cipher
          section
            p The 'key' is a jumbled-up alphabet
            p Letters are substituted for their entry in the key
          section
            h3 Demo
            .demo
              label(for='monoalphabetic-input') Input
              input#monoalphabetic-input(type='text', name='monoalphabetic-input' value="Aperture Science")
            .demo
              label(for='monoalphabetic-key') Alphabet
              input#monoalphabetic-key(type='text', name="monoalphabetic-key" value="PHYEUFSMQNJVKOWCTDABGIXRZL")
            .buttons
              input#monoalphabetic-encipher(type='button', value='Encipher')
              input#monoalphabetic-decipher(type='button', value='Decipher')
            .demo
              label(for='monoalphabetic-output') Output
              input#monoalphabetic-output(type='text', name='monoalphabetic-output')
          section
            h3 Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td 403,291,461,126,605,635,584,000,000
                  td 88.38
            p Not <em>quite</em> so easy to break.
          section
            h3 Unbreakable?
            p It was thought unbreakable for hundreds of years.
            p But it actually has a really big weakness.
          section
            h4 Frequency Analysis
            img.plain.stretch(data-src='img/english-letter-frequency.png')
          section
            ul
              li Identify which letters occur most often
              li Match them with the English letters that happen most often
              li Mix them around if things don't quite make sense
              li Luckily (for codebreakers), making partial progress is still beneficial
          section
            img.stretch(data-src='img/mary-queen-of-scots.jpg')
            p Frequency analysis is what got Mary Queen of Scots beheaded.
        section
          section
            img.plain.stretch(data-src='img/vigenere.png' style='background:none;')
            h2 Vigenère Cipher
          section
            img.stretch(data-src='img/vigenere-square.png')
            p Essentially, it's a 'shifting' Caesar Cipher, with an alphabetic key.
          section
            h3 Demo
            .demo
              label(for='vigenere-input') Input
              input#vigenere-input(type='text', name='vigenere-input' value="We do what we must because we can.")
            .demo
              label(for='vigenere-key') Key
              input#vigenere-key(type='text', name="vigenere-key" value="GLADOS")
            .buttons
              input#vigenere-encipher(type='button', value='Encipher')
              input#vigenere-decipher(type='button', value='Decipher')
            .demo
              label(for='vigenere-output') Output
              input#vigenere-output(type='text', name='vigenere-output')
          section
            h3 Entropy
            table
              thead
                tr
                  th Key Length
                  th Combinations
                  th Bits
              tbody
                tr
                  td 10
                  td 141,167,095,653,376
                  td 47
                tr
                  td 20
                  td 19,928,148,895,209,409,152,340,197,376
                  td 94
            ul
              li Strength depends on key length
              li Not susceptible to frequency analysis
          section
            img.stretch(data-src='img/charles-babbage.jpg')
            h4 Broken by
            h3 Charles Babbage
          section
            ul
              li Broke the Vigenère Cipher in ~1845
              li Kept a military secret until 1854
              li Approach picked out parts of text and tried converting them to common words
              li If the resulting 'key' started to make sense, you were on to something
        section
          section
            h2 An Unbreakable Cipher
          section
            h3 One-Time Pads
            ul
              li Key is the entire length of what's being encrypted.
              li A brute force attack finds the correct answer, but also every other possible correct answer.
              li It's <em>super</em> difficult to generate and distribute keys.
        section
          section
            h2 Variants of Substitution Ciphers
          section
            h3 Homophonic Substitution
            img.plain.stretch(data-src='img/homophonic.svg' style="background: none;")
            ul
              li Maps more common letters to a proportionate number of symbols
              li Still can be deciphered by analyzing relations between symbols
          section
            h3 The Zimmermann Telegram
            img.stretch(data-src='img/zimmermann-telegram.jpg')
            ul
              li Used 5-digit numbers that represented words
              li Deciphered using intercepted codebooks
              li British came up with cover story to explain how they got it
              li The US joined the war 2 months later
        section
          section
            img.stretch(data-src='img/enigma-machine.jpg')
            h2 The Enigma
          section
            img.stretch(data-src='img/enigma-diagram.png')
            ul
              li 3 (later 5) interchangeable rotors that transformed letters
              li Reflector that sent signals back through rotors
              li Plugboard that was reconfigured to swap certain letters (10 sets), left only 6 unswapped
              li Rotors changed on every keystroke
          section
            h3 Demo
            .demo
              label(for='enigma-input') Input
              input#enigma-input(type='text', name='enigma-input' value="forthegoodofallofus")
            .demo
              small (Key is on the next slide)
            .buttons
              input#enigma-encipher(type='button', value='Encipher')
              input#enigma-decipher(type='button', value='Decipher')
            .demo
              label(for='enigma-output') Output
              input#enigma-output(type='text', name='enigma-output')
          section
            h3 Key (JSON Representation)
            .demo
              label(for='enigma-key') Key
              textarea#enigma-key(name='enigma-key')
                | {
                |   "rotors": [
                |     {"type": "III", "ring": 0, "position": "X"},
                |     {"type": "II",  "ring": 0, "position": "R"},
                |     {"type": "I",   "ring": 0, "position": "D"}
                |   ],
                |   "plugboard": [
                |     "AB",
                |     "CD",
                |     "EF",
                |     "GH"
                |   ],
                |   "reflector": "B",
                |   "spacing": 4
                | }
          section
            h3 Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td 15,896,255,521,782,636,000
                  td 63.79
          section
            h3 Breaking Enigma in Poland
            ul
              li First version broken by a Polish mathmatician (Marian Rejewski) before the war
              li Codes were passed along by a spy, which allowed him to determine the rotor wirings
              li He passed his research on to France & Britain
          section
            h3 Breaking Enigma v2
            ul
              li Germans introduced 2 more rotors
              li German operators were lazy
              li 'Cribs' were parts of the text that could be guessed
              li Alan Turing devised a more sophisticated bombe - 210 in operation by the end of the war
              li Through the entire war (and long after), the British never revealed they had broken Enigma
          section
            blockquote The war, instead of finishing in 1945, would have ended in 1948...
        section
          h1 Modern Cryptography
        section
          section
            img(data-src='img/asymmetric-cat.jpg')
            h2 Asymmetric Cryptography
          section
            h3 RSA
            p Ron Rivest, Adi Shamir, and Leonard Adleman
          section
            h3 Factorization is hard
            ul
              li Use large primes to compute larger numbers that only have 2 factors
              li It's easy to compute 524,287✕6,700,417 = 3,512,941,527,679
              li It's not easy to go the other way
              li 524,287 and 6,700,417 serve as the 'private' key, 3,512,941,527,679 as the 'public' key.
              li RSA keys use primes with hundreds of digits
          section
            h3 Enables Secure Key Exchange
            p A message encrypted with a public key can <em>only</em> be decrypted with the private key.
            p A message encrypted with a private key <em>verifies</em> that it was encrypted by the private key holder, and can be unencrypted by anyone with the public key.
        section
          section
            h2 DES
            h3 Data Encryption Standard
          section
            h3 16 Rounds
            ul
              li It breaks fixed-length strings into 'blocks'
              li The 'key' customizes the transformation, so that a similar key doesn't reveal anything
          section
            h3 Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td 72,057,594,037,927,936
                  td 56
          section
            h3 Breaking DES
            img.stretch(data-src='img/des-brute-force.jpg')
            ul
              li It's now possible to break DES easily
              li Specialized computers can break it in less than a day
              li The one above was $250,000 from 1998
        section
          section
            h2 AES
            h3 Advanced Encryption Standard
          section
            h3 Substitution and Permutation
            ul
              li Each 'round' has 4 steps - each swapping bits differently
              li A 256-bit key has 14 rounds
          section
            h3 Demo
            .demo
              label(for='aes-input') Input
              input#aes-input(type='text', name='aes-input' value="You just keep on trying till you run out of cake.")
            .demo
              label(for='aes-key') Key
              input#aes-key(type='text', name="aes-key" value="2FAE57CC2F9692AAF683A54F52585B6F")
            .buttons
              input#aes-encipher(type='button', value='Encipher')
              input#aes-decipher(type='button', value='Decipher')
            .demo
              label(for='aes-output') Output
              input#aes-output(type='text', name='aes-output')
          section
            h3 Entropy
            table
              thead
                tr
                  th Combinations
                  th Bits
              tbody
                tr
                  td Up to 1.1579×10<sup>77</sup> (115 quattuorvigintillion)
                  td 128/192/256
          section
            h3 Breaking AES
            ul
              li It hasn't yet been broken
              li Potential weaknesses could reduce the search space to 254.4 bits
              li That's still mighty big
              li At current tech levels, using the fastest supercomputer, it'd take about 1×10<sup>18</sup> years to break AES 256
        section
          section
            h1 Quantum Cryptography
          section
            h2 Destroys all existing cryptography
            p It'd be possible to try all possible keys simultaneously.
          section
            h2 Provides unbreakable cryptography
            p Also provides security against interception.
        section
          h2 Further Reading
          p <a href='http://a.co/7wh3D1e'>The Code Book (Simon Singh)</a>
          p <a href='http://simonsingh.net'>simonsingh.net</a>
          p <a href='http://www.eng.utah.edu/~nmcdonal/Tutorials/EncryptionResearchReview.pdf'>Past, Present, and Future of Cryptography...</a>
          p <a href="https://github.com/russtaylor/crypto-presentation">This Presentation</a>
    script(src="index.js")
